from services.challenge_service import ChallengeService
from datetime import datetime

def register_handlers(bot):
    @bot.message_handler(commands=['createchallenge'])
    def create_challenge(message):
        try:
            parts = message.text.split(maxsplit=5)
            if len(parts) < 5:
                bot.reply_to(message, 
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createchallenge –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–º –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î –æ–ø–∏—Å–∞–Ω–∏–µ\n"
                    "–ü—Ä–∏–º–µ—Ä: /createchallenge –ú–∞—Ä–∞—Ñ–æ–Ω 42.2 2024-03-01 2024-03-31 –ú–∞—Ä–∞—Ñ–æ–Ω –∑–∞ –º–µ—Å—è—Ü")
                return

            title = parts[1]
            goal_km = float(parts[2])
            start_date = datetime.strptime(parts[3], '%Y-%m-%d').date()
            end_date = datetime.strptime(parts[4], '%Y-%m-%d').date()
            description = parts[5] if len(parts) > 5 else ""
            
            if start_date > end_date:
                bot.reply_to(message, "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")
                return
                
            user_id = str(message.from_user.id)
            
            challenge = ChallengeService.create_challenge(
                title, goal_km, start_date, end_date, description, user_id
            )
            
            response = f"–ß–µ–ª–ª–µ–Ω–¥–∂ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            response += f"ID: {challenge.challenge_id}\n"
            response += f"–¶–µ–ª—å: {challenge.goal_km} –∫–º\n"
            response += f"–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n"
            response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            
            bot.reply_to(message, response)
            
        except ValueError:
            bot.reply_to(message, 
                "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞—Ç –∏ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–∞.")
        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    @bot.message_handler(commands=['challenges'])
    def list_challenges(message):
        try:
            challenges = ChallengeService.get_active_challenges()
            
            if not challenges:
                bot.reply_to(message, "–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            response = "üèÉ‚Äç‚ôÇÔ∏è –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π:\n\n"
            
            for challenge in challenges:
                response += f"üéØ {challenge.title} (ID: {challenge.challenge_id})\n"
                response += f"–¶–µ–ª—å: {challenge.goal_km} –∫–º\n"
                response += f"–ü–µ—Ä–∏–æ–¥: {challenge.start_date} - {challenge.end_date}\n"
                if challenge.description:
                    response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {challenge.description}\n"
                response += f"üëâ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: /joinchallenge {challenge.challenge_id}\n\n"
            
            bot.reply_to(message, response)
            
        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    @bot.message_handler(commands=['challengestats'])
    def challenge_stats(message):
        try:
            parts = message.text.split()
            if len(parts) < 2:
                bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /challengestats [ID —á–µ–ª–ª–µ–Ω–¥–∂–∞]")
                return
                
            challenge_id = int(parts[1])
            stats = ChallengeService.get_challenge_stats(challenge_id)
            
            if not stats:
                bot.reply_to(message, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
                
            response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
            
            for idx, participant in enumerate(stats, 1):
                response += f"{idx}. {participant['username']}:\n"
                response += f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {participant['total_km']} –∫–º\n"
                response += f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {participant['active_days']}\n\n"
            
            bot.reply_to(message, response)
            
        except ValueError:
            bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–µ–ª–ª–µ–Ω–¥–∂–∞")
        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") 