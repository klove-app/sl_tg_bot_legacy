from datetime import datetime
import traceback
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.models.challenge import Challenge
from database.models.user import User
from database.models.running_log import RunningLog
from utils.formatters import round_km
from database.base import get_db
from database.logger import logger
from sqlalchemy import func, extract

def register_chat_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–∞—Ç–∞"""
    logger.info("Starting chat handlers registration...")

    def show_top(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –±–µ–≥—É–Ω–æ–≤ –≤ —á–∞—Ç–µ"""
        logger.info(f"Processing /top command. Message: {message.text}")
        try:
            year = datetime.now().year
            
            logger.debug(f"Processing /top for year {year}")
            
            db = next(get_db())
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_stats = db.query(
                func.count(func.distinct(RunningLog.user_id)).label('total_users'),
                func.count().label('total_runs'),
                func.sum(RunningLog.km).label('total_distance')
            ).filter(
                extract('year', RunningLog.date_added) == year
            ).first()
            
            if not total_stats or not total_stats.total_distance:
                logger.debug("No running data found")
                bot.reply_to(message, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–µ–∂–∫–∞—Ö –≤ —ç—Ç–æ–º –≥–æ–¥—É")
                return

            total_users = total_stats.total_users
            total_runs = total_stats.total_runs
            total_distance = float(total_stats.total_distance)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            results = db.query(
                User.username,
                func.count().label('runs_count'),
                func.sum(RunningLog.km).label('total_km'),
                func.avg(RunningLog.km).label('avg_km'),
                func.max(RunningLog.km).label('best_run')
            ).join(
                User, RunningLog.user_id == User.user_id
            ).filter(
                extract('year', RunningLog.date_added) == year
            ).group_by(
                RunningLog.user_id, User.username
            ).order_by(
                func.sum(RunningLog.km).desc()
            ).limit(10).all()

            response = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–≥—É–Ω–æ–≤ {year}\n"
                f"üë• {total_users} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è {total_runs} –ø—Ä–æ–±–µ–∂–µ–∫ ‚Ä¢ üìè {total_distance:.2f} –∫–º\n\n"
                f"üèÜ –†–µ–π—Ç–∏–Ω–≥:\n"
            )
            
            for i, result in enumerate(results, 1):
                username = result.username
                runs_count = result.runs_count
                total_km = float(result.total_km)
                avg_km = float(result.avg_km)
                best_run = float(result.best_run)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∞–ª—å –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                total_percent = (total_km / total_distance * 100)
                
                response += (
                    f"\n{medal} @{username} ‚Ä¢ {total_km:.2f} –∫–º ({total_percent:.1f}%)\n"
                    f"   {runs_count} –ø—Ä–æ–±–µ–∂–µ–∫ ‚Ä¢ ‚åÄ{avg_km:.2f} –∫–º ‚Ä¢ üî•{best_run:.2f} –∫–º\n"
                )

            bot.reply_to(message, response, parse_mode='HTML')
            logger.info("Top runners shown")
            
        except Exception as e:
            logger.error(f"Error in show_top: {e}")
            logger.error(f"Full traceback: {traceback.format_exc()}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot.message_handler(commands=['top'])(show_top)
    logger.info("Chat handlers registered successfully")