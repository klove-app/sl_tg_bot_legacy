from telebot.types import Message
from database.models.user import User
from database.models.running_log import RunningLog
from datetime import datetime
from handlers.base_handler import BaseHandler
from typing import Optional

class PrivateHandler(BaseHandler):
    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.logger.info("Registering private message handlers")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.bot.register_message_handler(
            self.handle_start,
            commands=['start'],
            func=lambda message: message.chat.type == 'private'
        )
        
        self.bot.register_message_handler(
            self.handle_run,
            commands=['run'],
            func=lambda message: message.chat.type == 'private'
        )
        
        self.bot.register_message_handler(
            self.handle_stats,
            commands=['stats'],
            func=lambda message: message.chat.type == 'private'
        )
        
        self.bot.register_message_handler(
            self.handle_rank,
            commands=['rank'],
            func=lambda message: message.chat.type == 'private'
        )
        
        self.logger.info("Private message handlers registered successfully")

    def handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        user_id = str(message.from_user.id)
        username = message.from_user.username or f"user_{user_id}"
        
        user = User.get_by_id(user_id)
        if not user:
            user = User.create(user_id, username, chat_type='private')
            response = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –ø—Ä–æ–±–µ–∂–∫–∏.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/run - –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–±–µ–∂–∫—É\n"
                "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "/rank - —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ"
            )
        else:
            response = (
                "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/run - –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–±–µ–∂–∫—É\n"
                "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "/rank - —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ"
            )
        
        self.bot.reply_to(message, response)

    def handle_run(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /run –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        self.bot.reply_to(
            message,
            "–í–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–æ–±–µ–∂–∫–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.2)"
        )
        self.bot.register_next_step_handler(message, self.process_run_distance)

    def process_run_distance(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–æ–±–µ–∂–∫–∏"""
        try:
            km = float(message.text.strip())
            
            if km > 100:
                self.bot.reply_to(message, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è - 100 –∫–º")
                return
                
            if RunningLog.add_entry(
                user_id=str(message.from_user.id),
                km=km,
                date_added=datetime.now().date()
            ):
                user = User.get_by_id(str(message.from_user.id))
                total_km = RunningLog.get_user_total_km(str(message.from_user.id))
                
                response = f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–æ–±–µ–∂–∫–∞ {km:.2f} –∫–º!\n"
                if user and user.goal_km > 0:
                    progress = (total_km / user.goal_km * 100)
                    response += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {total_km:.2f} –∏–∑ {user.goal_km:.2f} –∫–º ({progress:.2f}%)"
                
                self.bot.reply_to(message, response)
            else:
                self.bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É")
                
        except ValueError:
            self.bot.reply_to(
                message,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.2)"
            )

    def handle_stats(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        user_id = str(message.from_user.id)
        stats = RunningLog.get_personal_stats(user_id)
        
        if stats['runs_count'] == 0:
            response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–∂–µ–∫."
        else:
            response = (
                "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üèÉ‚Äç‚ôÇÔ∏è –í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫: {stats['runs_count']}\n"
                f"üìè –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['total_km']:.2f} –∫–º\n"
                f"üìà –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['average_run']:.2f} –∫–º\n"
                f"üéØ –õ—É—á—à–∞—è –ø—Ä–æ–±–µ–∂–∫–∞: {stats['longest_run']:.2f} –∫–º\n"
                f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {stats['active_days']}\n\n"
                "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Å—è—Ü–∞–º:\n"
            )
            
            for month_stat in stats['monthly_progress']:
                month_name = {
                    1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç',
                    4: '–ê–ø—Ä–µ–ª—å', 5: '–ú–∞–π', 6: '–ò—é–Ω—å',
                    7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç', 9: '–°–µ–Ω—Ç—è–±—Ä—å',
                    10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'
                }[month_stat['month']]
                response += f"{month_name}: {month_stat['km']:.2f} –∫–º\n"
        
        self.bot.reply_to(message, response)

    def handle_rank(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rank –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        user_id = str(message.from_user.id)
        rank_info = RunningLog.get_user_global_rank(user_id)
        
        if rank_info['rank'] == 0:
            response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–∂–µ–∫ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."
        else:
            response = (
                "üèÜ –í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ:\n\n"
                f"üìä –ü–æ–∑–∏—Ü–∏—è: {rank_info['rank']} –∏–∑ {rank_info['total_users']}\n"
                f"üìè –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {rank_info['total_km']:.2f} –∫–º\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –±–µ–≥—É–Ω–æ–≤
            top_runners = RunningLog.get_top_runners(limit=5)
            if top_runners:
                response += "\nüèÉ‚Äç‚ôÇÔ∏è –¢–æ–ø-5 –±–µ–≥—É–Ω–æ–≤:\n"
                for i, runner in enumerate(top_runners, 1):
                    user = User.get_by_id(runner['user_id'])
                    username = user.username if user else f"user_{runner['user_id']}"
                    response += f"{i}. {username}: {runner['total_km']:.2f} –∫–º\n"
        
        self.bot.reply_to(message, response)

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    handler = PrivateHandler(bot)
    handler.register() 