from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from database.models.user import User
from database.models.running_log import RunningLog
from datetime import datetime
import traceback
from handlers.base_handler import BaseHandler
import calendar
from database.base import SessionLocal
from telebot.apihelper import ApiTelegramException

class StatsHandler(BaseHandler):
    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.logger.info("Registering stats handlers")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞–ø—Ä—è–º—É—é
        self.bot.register_message_handler(
            self.handle_stats,
            commands=['stats', 'mystats']
        )
        
        self.bot.register_message_handler(
            self.handle_top,
            commands=['top']
        )
        
        self.bot.register_message_handler(
            self.handle_profile,
            commands=['me', 'profile']
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        self.bot.register_callback_query_handler(
            self.handle_set_goal_callback,
            func=lambda call: call.data.startswith('set_goal_') or 
                            call.data.startswith('adjust_goal_') or 
                            call.data.startswith('confirm_goal_') or
                            call.data == 'set_goal_precise'
        )
        
        self.bot.register_callback_query_handler(
            self.handle_detailed_stats_callback,
            func=lambda call: call.data == 'show_detailed_stats'
        )
        
        self.bot.register_callback_query_handler(
            self.handle_edit_runs_callback,
            func=lambda call: call.data == 'edit_runs'
        )
        
        self.bot.register_callback_query_handler(
            self.handle_back_to_profile_callback,
            func=lambda call: call.data == 'back_to_profile'
        )
        
        self.bot.register_callback_query_handler(
            self.handle_edit_run_callback,
            func=lambda call: call.data.startswith('edit_run_')
        )
        
        self.bot.register_callback_query_handler(
            self.handle_delete_run_callback,
            func=lambda call: call.data.startswith('delete_run_')
        )
        
        self.bot.register_callback_query_handler(
            self.handle_confirm_delete_callback,
            func=lambda call: call.data.startswith('confirm_delete_')
        )
        
        self.bot.register_callback_query_handler(
            self.handle_adjust_run_callback,
            func=lambda call: call.data.startswith('adjust_run_')
        )
        
        self.bot.register_callback_query_handler(
            self.handle_new_run_callback,
            func=lambda call: call.data == 'new_run' or call.data.startswith('quick_run_')
        )
        
        self.logger.info("Stats handlers registered successfully")

    def handle_stats(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.log_message(message, "stats")
        try:
            user_id = str(message.from_user.id)
            self.logger.info(f"Getting user {user_id} from database")
            user = User.get_by_id(user_id)
            if not user:
                self.logger.info(f"User {user_id} not found")
                self.bot.reply_to(message, "‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–æ–±–µ–∂–∫—É!")
                return

            current_year = datetime.now().year
            self.logger.info(f"Getting stats for user {user_id} for year {current_year}")
            stats = RunningLog.get_user_stats(user_id, current_year)
            self.logger.info(f"Got stats: {stats}")
            best_stats = RunningLog.get_best_stats(user_id)
            self.logger.info(f"Got best stats: {best_stats}")

            response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user.username}\n\n"
            response += f"–ó–∞ {current_year} –≥–æ–¥:\n"
            response += f"üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–µ–∂–µ–∫: {stats['runs_count']}\n"
            response += f"üìè –í—Å–µ–≥–æ: {stats['total_km']:.2f} –∫–º\n"
            response += f"üìà –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['avg_km']:.2f} –∫–º\n"
            
            if user.goal_km > 0:
                progress = (stats['total_km'] / user.goal_km * 100)
                response += f"\nüéØ –¶–µ–ª—å –Ω–∞ –≥–æ–¥: {user.goal_km:.2f} –∫–º\n"
                response += f"‚ú® –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.2f}%\n"
            
            response += f"\nüèÜ –õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
            response += f"üí™ –õ—É—á—à–∞—è –ø—Ä–æ–±–µ–∂–∫–∞: {best_stats['best_run']:.2f} –∫–º\n"
            response += f"üåü –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {best_stats['total_km']:.2f} –∫–º"

            self.logger.info(f"Sending response: {response}")
            self.bot.reply_to(message, response)
            self.logger.info(f"Sent stats to user {user_id}")
        except Exception as e:
            self.logger.error(f"Error in handle_stats: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    def handle_top(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –±–µ–≥—É–Ω–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞"""
        self.log_message(message, "top")
        try:
            current_year = datetime.now().year
            current_month = datetime.now().month
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –±–µ–≥—É–Ω–æ–≤
            top_runners = RunningLog.get_top_runners(limit=10, year=current_year)
            self.logger.info(f"Got top runners: {top_runners}")
            
            if not top_runners:
                self.bot.reply_to(message, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–µ–∂–∫–∞—Ö")
                return
            
            response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {current_year} –≥–æ–¥\n\n"
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
            if message.chat.type in ['group', 'supergroup']:
                chat_id = str(message.chat.id)
                self.logger.info(f"Getting stats for chat {chat_id}")
                
                year_stats = RunningLog.get_chat_stats(chat_id, year=current_year)
                self.logger.info(f"Got year stats: {year_stats}")
                
                month_stats = RunningLog.get_chat_stats(chat_id, year=current_year, month=current_month)
                self.logger.info(f"Got month stats: {month_stats}")
                
                response += f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:\n"
                response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {year_stats['users_count']}\n"
                response += f"üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–µ–∂–µ–∫: {year_stats['runs_count']}\n"
                response += f"üìè –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {year_stats['total_km']:.2f} –∫–º\n"
                response += f"üí™ –õ—É—á—à–∞—è –ø—Ä–æ–±–µ–∂–∫–∞: {year_stats['best_run']:.2f} –∫–º\n\n"
                
                month_name = calendar.month_name[current_month]
                response += f"–ó–∞ {month_name}:\n"
                response += f"üìè –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {month_stats['total_km']:.2f} –∫–º\n"
                response += f"üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–µ–∂–µ–∫: {month_stats['runs_count']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –±–µ–≥—É–Ω–æ–≤
            response += f"üèÜ –¢–æ–ø –±–µ–≥—É–Ω–æ–≤:\n\n"
            
            for i, runner in enumerate(top_runners, 1):
                user = User.get_by_id(runner['user_id'])
                username = user.username if user else "Unknown"
                
                response += f"{i}. {username}\n"
                response += f"‚îú –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {runner['total_km']:.2f} –∫–º\n"
                response += f"‚îú –ü—Ä–æ–±–µ–∂–µ–∫: {runner['runs_count']}\n"
                response += f"‚îú –°—Ä–µ–¥–Ω—è—è: {runner['avg_km']:.2f} –∫–º\n"
                response += f"‚îî –õ—É—á—à–∞—è: {runner['best_run']:.2f} –∫–º\n\n"
            
            self.logger.info(f"Sending response: {response}")
            self.bot.reply_to(message, response)
            
        except Exception as e:
            self.logger.error(f"Error in handle_top: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –±–µ–≥—É–Ω–æ–≤")

    def handle_profile(self, message: Message, user_id=None, db=None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.log_message(message, "profile")
        try:
            # –ï—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            if user_id is None:
                user_id = str(message.from_user.id)
            
            self.logger.info(f"Getting profile for user {user_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            if db is None:
                self.logger.debug("Creating new database session")
                db = SessionLocal()
            else:
                self.logger.debug("Using existing database session")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = db.query(User).filter(User.user_id == user_id).first()
                self.logger.debug(f"Found user in database: {user is not None}")
                
                if not user:
                    username = message.from_user.username or message.from_user.first_name
                    chat_type = message.chat.type if message.chat else 'private'
                    self.logger.info(f"Creating new user: {username}, chat_type: {chat_type}")
                    user = User(user_id=user_id, username=username, chat_type=chat_type)
                    db.add(user)
                    db.commit()
                
                current_year = datetime.now().year
                current_month = datetime.now().month
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.logger.debug(f"Getting year stats for user {user_id}")
                year_stats = RunningLog.get_user_stats(user_id, current_year, db=db)
                self.logger.debug(f"Year stats: {year_stats}")
                
                self.logger.debug(f"Getting month stats for user {user_id}")
                month_stats = RunningLog.get_user_stats(user_id, current_year, current_month, db=db)
                self.logger.debug(f"Month stats: {month_stats}")
                
                self.logger.debug(f"Getting best stats for user {user_id}")
                best_stats = RunningLog.get_best_stats(user_id, db=db)
                self.logger.debug(f"Best stats: {best_stats}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                response = f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å {user.username}</b>\n\n"
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
                if user.goal_km > 0:
                    progress = (year_stats['total_km'] / user.goal_km * 100)
                    progress_bar = self._generate_progress_bar(progress)
                    response += f"üéØ –¶–µ–ª—å –Ω–∞ {current_year}: {user.goal_km:.2f} –∫–º\n"
                    response += f"{progress_bar} {progress:.2f}%\n"
                    response += f"üìä –ü—Ä–æ–π–¥–µ–Ω–æ: {year_stats['total_km']:.2f} –∫–º\n"
                    response += f"‚≠êÔ∏è –û—Å—Ç–∞–ª–æ—Å—å: {user.goal_km - year_stats['total_km']:.2f} –∫–º\n\n"
                else:
                    response += "üéØ –¶–µ–ª—å –Ω–∞ –≥–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                month_name = calendar.month_name[current_month]
                response += f"üìÖ <b>{month_name}</b>\n"
                response += f"‚îú –ü—Ä–æ–±–µ–∂–µ–∫: {month_stats['runs_count']}\n"
                response += f"‚îú –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {month_stats['total_km']:.2f} –∫–º\n"
                if month_stats['runs_count'] > 0:
                    response += f"‚îî –°—Ä–µ–¥–Ω—è—è: {month_stats['avg_km']:.2f} –∫–º\n\n"
                else:
                    response += f"‚îî –°—Ä–µ–¥–Ω—è—è: 0.0 –∫–º\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤
                if year_stats.get('chat_stats'):
                    response += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º</b>\n"
                    for chat_type, stats in year_stats['chat_stats'].items():
                        chat_type_display = chat_type.capitalize() if chat_type else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        response += f"<b>{chat_type_display}</b>\n"
                        response += f"‚îú –ü—Ä–æ–±–µ–∂–µ–∫: {stats['runs_count']}\n"
                        response += f"‚îú –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['total_km']:.2f} –∫–º\n"
                        response += f"‚îî –°—Ä–µ–¥–Ω—è—è: {stats['avg_km']:.2f} –∫–º\n\n"
                
                # –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                response += f"üèÜ <b>–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>\n"
                response += f"‚îú –ü—Ä–æ–±–µ–∂–∫–∞: {best_stats['best_run']:.2f} –∫–º\n"
                response += f"‚îî –í—Å–µ–≥–æ: {best_stats['total_runs']} –ø—Ä–æ–±–µ–∂–µ–∫\n"
                
                self.logger.debug(f"Generated response: {response}")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                markup = InlineKeyboardMarkup()
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                markup.row(
                    InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_detailed_stats"),
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–∂–∫–∏", callback_data="edit_runs")
                )
                
                # –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏
                if user.goal_km == 0:
                    markup.row(InlineKeyboardButton("üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="set_goal_0"))
                else:
                    markup.row(InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å", callback_data="set_goal_0"))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                self.logger.info("Sending profile message")
                self.bot.reply_to(message, response, reply_markup=markup, parse_mode='HTML')
                self.logger.info("Profile message sent successfully")
                
            finally:
                if db is not None:
                    self.logger.debug("Closing database session")
                    db.close()
                    
        except Exception as e:
            self.logger.error(f"Error in handle_profile: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

    def _generate_progress_bar(self, percentage: float, length: int = 10) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = int(percentage / (100 / length))
        empty = length - filled
        return '‚ñ∞' * filled + '‚ñ±' * empty

    def handle_detailed_stats(self, message: Message, user_id: str = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å—Ç–∞—Ç—å–∏"""
        try:
            if not user_id:
                user_id = str(message.from_user.id)
            
            user = User.get_by_id(user_id)
            if not user:
                return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            current_year = datetime.now().year
            current_month = datetime.now().month
            month_name = calendar.month_name[current_month]
            
            year_stats = RunningLog.get_user_stats(user_id, current_year)
            month_stats = RunningLog.get_user_stats(user_id, current_year, current_month)
            best_stats = RunningLog.get_best_stats(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
            article = f"üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user.username}\n\n"
            
            # –ì–æ–¥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            article += f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {current_year} –≥–æ–¥</b>\n"
            article += f"üèÉ‚Äç‚ôÇÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–∂–µ–∫: {year_stats['runs_count']}\n"
            article += f"üìè –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {year_stats['total_km']:.2f} –∫–º\n"
            article += f"üìà –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {year_stats['avg_km']:.2f} –∫–º\n"
            if year_stats['runs_count'] > 0:
                article += f"üî• –¢–µ–º–ø —Ä–æ—Å—Ç–∞: {year_stats['total_km'] / (current_month):.2f} –∫–º/–º–µ—Å—è—Ü\n"
            
            # –¶–µ–ª—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
            if user.goal_km > 0:
                progress = (year_stats['total_km'] / user.goal_km * 100)
                article += f"\n<b>–¶–µ–ª—å –Ω–∞ {current_year} –≥–æ–¥</b>\n"
                article += f"üéØ –¶–µ–ª—å: {user.goal_km:.2f} –∫–º\n"
                article += f"‚ú® –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:.2f}%\n"
                article += f"üìä –û—Å—Ç–∞–ª–æ—Å—å: {user.goal_km - year_stats['total_km']:.2f} –∫–º\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤
            if year_stats.get('chat_stats'):
                article += f"\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤</b>\n"
                for chat_type, stats in year_stats['chat_stats'].items():
                    article += f"\n{chat_type.capitalize()}\n"
                    article += f"‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–∂–µ–∫: {stats['runs_count']}\n"
                    article += f"‚îú –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['total_km']:.2f} –∫–º\n"
                    article += f"‚îî –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['avg_km']:.2f} –∫–º\n"
            
            # –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            article += f"\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month_name}</b>\n"
            article += f"üèÉ‚Äç‚ôÇÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–∂–µ–∫: {month_stats['runs_count']}\n"
            article += f"üìè –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {month_stats['total_km']:.2f} –∫–º\n"
            if month_stats['runs_count'] > 0:
                article += f"üìà –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {month_stats['avg_km']:.2f} –∫–º\n"
            
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü
                if month_stats.get('chat_stats'):
                    article += f"\n–ü–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤:\n"
                    for chat_type, stats in month_stats['chat_stats'].items():
                        article += f"{chat_type.capitalize()}: {stats['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫, {stats['total_km']:.2f} –∫–º\n"
            
            # –õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            article += f"\n<b>–õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è</b>\n"
            article += f"üí™ –õ—É—á—à–∞—è –ø—Ä–æ–±–µ–∂–∫–∞: {best_stats['best_run']:.2f} –∫–º\n"
            article += f"üåü –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {best_stats['total_km']:.2f} –∫–º\n"
            article += f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫: {best_stats['total_runs']}\n"
            
            return article
            
        except Exception as e:
            self.logger.error(f"Error in handle_detailed_stats: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

    def handle_set_goal_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏"""
        try:
            user_id = str(call.from_user.id)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            db = SessionLocal()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = db.query(User).filter(User.user_id == user_id).first()
                if not user:
                    username = call.from_user.username or call.from_user.first_name
                    user = User(user_id=user_id, username=username)
                    db.add(user)
                    db.commit()

                if call.data == "set_goal_custom":
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
                    last_year = datetime.now().year - 1
                    last_year_stats = RunningLog.get_user_stats(user_id, last_year, db=db)
                    
                    markup = InlineKeyboardMarkup()
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ü–µ–ª–∏ –Ω–∞ –µ—ë –æ—Å–Ω–æ–≤–µ
                    if last_year_stats['total_km'] > 0:
                        last_year_km = last_year_stats['total_km']
                        markup.row(
                            InlineKeyboardButton(
                                f"üéØ –ö–∞–∫ –≤ {last_year} –≥–æ–¥—É: {last_year_km:.0f} –∫–º",
                                callback_data=f"set_goal_{last_year_km}"
                            )
                        )
                        markup.row(
                            InlineKeyboardButton(
                                f"üî• +10% –∫ {last_year}: {last_year_km * 1.1:.0f} –∫–º",
                                callback_data=f"set_goal_{last_year_km * 1.1}"
                            )
                        )
                        markup.row(
                            InlineKeyboardButton(
                                f"üí™ +25% –∫ {last_year}: {last_year_km * 1.25:.0f} –∫–º",
                                callback_data=f"set_goal_{last_year_km * 1.25}"
                            )
                        )
                    
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–ª–µ–π
                    markup.row(
                        InlineKeyboardButton("500 –∫–º", callback_data="set_goal_500"),
                        InlineKeyboardButton("1000 –∫–º", callback_data="set_goal_1000"),
                        InlineKeyboardButton("1500 –∫–º", callback_data="set_goal_1500")
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    markup.row(
                        InlineKeyboardButton(
                            "üéØ –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
                            callback_data="set_goal_precise"
                        )
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
                    markup.row(
                        InlineKeyboardButton(
                            "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é",
                            callback_data="back_to_profile"
                        )
                    )
                    
                    response = "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –Ω–∞ –≥–æ–¥:\n\n"
                    if last_year_stats['total_km'] > 0:
                        response += f"üìä –í {last_year} –≥–æ–¥—É –≤—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏: {last_year_stats['total_km']:.2f} –∫–º\n"
                        response += f"üèÉ‚Äç‚ôÇÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–∂–µ–∫: {last_year_stats['runs_count']}\n"
                        response += f"üìà –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {last_year_stats['avg_km']:.2f} –∫–º\n\n"
                    
                    response += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
                    
                    try:
                        self.bot.edit_message_text(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text=response,
                            reply_markup=markup
                        )
                    except ApiTelegramException as e:
                        if "message is not modified" not in str(e):
                            raise
                    return
                
                elif call.data == "set_goal_precise":
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ +/-
                    current_goal = user.goal_km if user.goal_km else 1000
                    markup = InlineKeyboardMarkup()
                    
                    # –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                    markup.row(
                        InlineKeyboardButton("‚ûñ 100", callback_data=f"adjust_goal_{current_goal - 100}"),
                        InlineKeyboardButton("‚ûñ 50", callback_data=f"adjust_goal_{current_goal - 50}"),
                        InlineKeyboardButton("‚ûñ 10", callback_data=f"adjust_goal_{current_goal - 10}")
                    )
                    markup.row(
                        InlineKeyboardButton("‚ûï 10", callback_data=f"adjust_goal_{current_goal + 10}"),
                        InlineKeyboardButton("‚ûï 50", callback_data=f"adjust_goal_{current_goal + 50}"),
                        InlineKeyboardButton("‚ûï 100", callback_data=f"adjust_goal_{current_goal + 100}")
                    )
                    
                    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
                    markup.row(
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_goal_{current_goal}"),
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="set_goal_custom")
                    )
                    
                    response = f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–∏ –Ω–∞ –≥–æ–¥\n\n"
                    response += f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_goal:.0f} –∫–º\n\n"
                    response += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è:"
                    
                    try:
                        self.bot.edit_message_text(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text=response,
                            reply_markup=markup
                        )
                    except ApiTelegramException as e:
                        if "message is not modified" not in str(e):
                            raise
                    return
                
                elif call.data.startswith("adjust_goal_"):
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–ª–∏
                    new_goal = float(call.data.split('_')[2])
                    if new_goal <= 0:
                        self.bot.answer_callback_query(
                            call.id,
                            "‚ùå –¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
                        )
                        return
                    
                    markup = InlineKeyboardMarkup()
                    markup.row(
                        InlineKeyboardButton("‚ûñ 100", callback_data=f"adjust_goal_{new_goal - 100}"),
                        InlineKeyboardButton("‚ûñ 50", callback_data=f"adjust_goal_{new_goal - 50}"),
                        InlineKeyboardButton("‚ûñ 10", callback_data=f"adjust_goal_{new_goal - 10}")
                    )
                    markup.row(
                        InlineKeyboardButton("‚ûï 10", callback_data=f"adjust_goal_{new_goal + 10}"),
                        InlineKeyboardButton("‚ûï 50", callback_data=f"adjust_goal_{new_goal + 50}"),
                        InlineKeyboardButton("‚ûï 100", callback_data=f"adjust_goal_{new_goal + 100}")
                    )
                    markup.row(
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_goal_{new_goal}"),
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="set_goal_custom")
                    )
                    
                    response = f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–∏ –Ω–∞ –≥–æ–¥\n\n"
                    response += f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_goal:.0f} –∫–º\n\n"
                    response += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è:"
                    
                    try:
                        self.bot.edit_message_text(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text=response,
                            reply_markup=markup
                        )
                    except ApiTelegramException as e:
                        if "message is not modified" not in str(e):
                            raise
                    return
                
                elif call.data.startswith("confirm_goal_") or call.data.startswith("set_goal_"):
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–ª—å
                    if call.data.startswith("confirm_goal_"):
                        goal = float(call.data.split('_')[2])
                    else:
                        goal = float(call.data.split('_')[2])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user.goal_km = goal
                    db.commit()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    self.bot.answer_callback_query(
                        call.id,
                        "‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        self.bot.delete_message(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id
                        )
                    except:
                        pass
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
                    response = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {user.username}\n\n"
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    current_year = datetime.now().year
                    year_stats = RunningLog.get_user_stats(user_id, current_year, db=db)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                    response += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {current_year} –≥–æ–¥:\n"
                    response += f"‚îú üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–µ–∂–µ–∫: {year_stats['runs_count']}\n"
                    response += f"‚îú üìè –í—Å–µ–≥–æ: {year_stats['total_km']:.2f} –∫–º\n"
                    if year_stats['runs_count'] > 0:
                        response += f"‚îî üìà –°—Ä–µ–¥–Ω—è—è: {year_stats['avg_km']:.2f} –∫–º\n\n"
                    else:
                        response += f"‚îî üìà –°—Ä–µ–¥–Ω—è—è: 0.0 –∫–º\n\n"
                    
                    # –¶–µ–ª—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if goal > 0:
                        progress = (year_stats['total_km'] / goal * 100)
                        response += f"üéØ –¶–µ–ª—å –Ω–∞ {current_year} –≥–æ–¥: {goal:.2f} –∫–º\n"
                        response += f"‚ú® –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.2f}%\n"
                    else:
                        response += "üéØ –¶–µ–ª—å –Ω–∞ –≥–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    markup = InlineKeyboardMarkup()
                    markup.row(
                        InlineKeyboardButton(
                            "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –Ω–∞ 2025",
                            callback_data="set_goal_custom"
                        )
                    )
                    markup.row(
                        InlineKeyboardButton(
                            "üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                            callback_data="show_detailed_stats"
                        )
                    )
                    markup.row(
                        InlineKeyboardButton(
                            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–∂–∫–∏",
                            callback_data="edit_runs"
                        )
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.bot.send_message(
                        chat_id=call.message.chat.id,
                        text=response,
                        reply_markup=markup
                    )
            finally:
                db.close()
            
        except Exception as e:
            self.logger.error(f"Error in handle_set_goal_callback: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            try:
                self.bot.answer_callback_query(
                    call.id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏"
                )
            except:
                pass

    def handle_detailed_stats_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            user_id = str(call.from_user.id)
            article = self.handle_detailed_stats(call.message, user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
            markup = InlineKeyboardMarkup()
            markup.row(
                InlineKeyboardButton(
                    "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é",
                    callback_data="back_to_profile"
                )
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=article,
                reply_markup=markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            self.logger.error(f"Error in handle_detailed_stats_callback: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            )
    
    def handle_edit_runs_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–µ–∂–µ–∫"""
        try:
            user_id = str(call.from_user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            runs = RunningLog.get_user_runs(user_id, limit=5)
            
            if not runs:
                self.bot.answer_callback_query(
                    call.id,
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return
            
            response = "üèÉ‚Äç‚ôÇÔ∏è –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏:\n\n"
            
            markup = InlineKeyboardMarkup()
            
            for run in runs:
                run_date = run.date_added.strftime("%d.%m")
                response += f"üìÖ {run_date}: {run.km:.2f} –∫–º\n"
                markup.row(
                    InlineKeyboardButton(
                        f"‚úèÔ∏è {run_date} ({run.km:.2f} –∫–º)",
                        callback_data=f"edit_run_{run.log_id}"
                    ),
                    InlineKeyboardButton(
                        "‚ùå",
                        callback_data=f"delete_run_{run.log_id}"
                    )
                )
            
            markup.row(
                InlineKeyboardButton(
                    "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é",
                    callback_data="back_to_profile"
                )
            )
            
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=response,
                reply_markup=markup
            )
            
        except Exception as e:
            self.logger.error(f"Error in handle_edit_runs_callback: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–µ–∂–µ–∫"
            )

    def handle_edit_run_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–µ–∂–∫–∏"""
        try:
            run_id = int(call.data.split('_')[2])
            user_id = str(call.from_user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–µ–∂–∫—É –∏–∑ –±–∞–∑—ã
            db = SessionLocal()
            try:
                run = db.query(RunningLog).filter(
                    RunningLog.log_id == run_id,
                    RunningLog.user_id == user_id
                ).first()
                
                if not run:
                    self.bot.answer_callback_query(
                        call.id,
                        "‚ùå –ü—Ä–æ–±–µ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
                markup = InlineKeyboardMarkup()
                current_km = run.km
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ ¬±0.5, ¬±1, ¬±2 –∫–º
                markup.row(
                    InlineKeyboardButton(f"‚ûñ 2–∫–º", callback_data=f"adjust_run_{run_id}_{current_km - 2}"),
                    InlineKeyboardButton(f"‚ûñ 1–∫–º", callback_data=f"adjust_run_{run_id}_{current_km - 1}"),
                    InlineKeyboardButton(f"‚ûñ 0.5–∫–º", callback_data=f"adjust_run_{run_id}_{current_km - 0.5}")
                )
                markup.row(
                    InlineKeyboardButton(f"‚ûï 0.5–∫–º", callback_data=f"adjust_run_{run_id}_{current_km + 0.5}"),
                    InlineKeyboardButton(f"‚ûï 1–∫–º", callback_data=f"adjust_run_{run_id}_{current_km + 1}"),
                    InlineKeyboardButton(f"‚ûï 2–∫–º", callback_data=f"adjust_run_{run_id}_{current_km + 2}")
                )
                
                # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                markup.row(
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_runs"),
                    InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_run_{run_id}")
                )
                
                response = (
                    f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏\n\n"
                    f"üìÖ –î–∞—Ç–∞: {run.date_added.strftime('%d.%m.%Y')}\n"
                    f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {current_km:.2f} –∫–º\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏:"
                )
                
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=response,
                    reply_markup=markup
                )
                
            finally:
                db.close()
            
        except Exception as e:
            self.logger.error(f"Error in handle_edit_run_callback: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–±–µ–∂–∫–∏"
            )

    def handle_adjust_run_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–æ–±–µ–∂–∫–∏"""
        try:
            # –§–æ—Ä–º–∞—Ç: adjust_run_ID_DISTANCE
            parts = call.data.split('_')
            run_id = int(parts[2])
            new_distance = float(parts[3])
            user_id = str(call.from_user.id)
            
            if new_distance <= 0:
                self.bot.answer_callback_query(
                    call.id,
                    "‚ùå –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            if new_distance > 100:
                self.bot.answer_callback_query(
                    call.id,
                    "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è - 100 –∫–º"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–æ–±–µ–∂–∫–∏
            db = SessionLocal()
            try:
                run = db.query(RunningLog).filter(
                    RunningLog.log_id == run_id,
                    RunningLog.user_id == user_id
                ).first()
                
                if not run:
                    self.bot.answer_callback_query(
                        call.id,
                        "‚ùå –ü—Ä–æ–±–µ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    )
                    return
                
                old_distance = run.km
                run.km = new_distance
                db.commit()
                
                self.bot.answer_callback_query(
                    call.id,
                    f"‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞: {old_distance:.2f} ‚Üí {new_distance:.2f} –∫–º"
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–±–µ–∂–µ–∫
                self.handle_edit_runs_callback(call)
                
            finally:
                db.close()
            
        except Exception as e:
            self.logger.error(f"Error in handle_adjust_run_callback: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏"
            )

    def handle_delete_run_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–∂–∫–∏"""
        try:
            run_id = int(call.data.split('_')[2])
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            markup = InlineKeyboardMarkup()
            markup.row(
                InlineKeyboardButton(
                    "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"confirm_delete_{run_id}"
                ),
                InlineKeyboardButton(
                    "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
                    callback_data="edit_runs"
                )
            )
            
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–µ–∂–∫—É?",
                reply_markup=markup
            )
            
        except Exception as e:
            self.logger.error(f"Error in handle_delete_run_callback: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–±–µ–∂–∫–∏"
            )

    def handle_back_to_profile_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            db = SessionLocal()
            try:
                user_id = str(call.from_user.id)
                self.handle_profile(call.message, user_id, db)
            finally:
                db.close()
            
        except Exception as e:
            self.logger.error(f"Error in handle_back_to_profile_callback: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é"
            )

    def handle_confirm_delete_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–∂–∫–∏"""
        try:
            run_id = int(call.data.split('_')[2])
            user_id = str(call.from_user.id)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–∂–∫—É
            db = SessionLocal()
            try:
                run = db.query(RunningLog).filter(
                    RunningLog.log_id == run_id,
                    RunningLog.user_id == user_id
                ).first()
                
                if not run:
                    self.bot.answer_callback_query(
                        call.id,
                        "‚ùå –ü—Ä–æ–±–µ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    )
                    return
                
                db.delete(run)
                db.commit()
            finally:
                db.close()
            
            self.bot.answer_callback_query(
                call.id,
                "‚úÖ –ü—Ä–æ–±–µ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–±–µ–∂–µ–∫
            self.handle_edit_runs_callback(call)
            
        except Exception as e:
            self.logger.error(f"Error in handle_confirm_delete_callback: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–±–µ–∂–∫–∏"
            )

    def handle_new_run_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–æ–≤–æ–π –ø—Ä–æ–±–µ–∂–∫–∏"""
        try:
            if call.data == 'new_run':
                markup = InlineKeyboardMarkup()
                
                # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
                markup.row(
                    InlineKeyboardButton("5 –∫–º", callback_data="quick_run_5"),
                    InlineKeyboardButton("7.5 –∫–º", callback_data="quick_run_7.5"),
                    InlineKeyboardButton("10 –∫–º", callback_data="quick_run_10")
                )
                markup.row(
                    InlineKeyboardButton("15 –∫–º", callback_data="quick_run_15"),
                    InlineKeyboardButton("21.1 –∫–º", callback_data="quick_run_21.1"),
                    InlineKeyboardButton("42.2 –∫–º", callback_data="quick_run_42.2")
                )
                
                # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
                markup.row(
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
                )
                
                response = (
                    "üèÉ‚Äç‚ôÇÔ∏è <b>–ù–æ–≤–∞—è –ø—Ä–æ–±–µ–∂–∫–∞</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
                    "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.2)\n"
                    "‚Ä¢ –ö–∏–ª–æ–º–µ—Ç—Ä–∞–∂ –∏ –∑–∞–º–µ—Ç–∫—É (5.2 –£—Ç—Ä–µ–Ω–Ω—è—è)\n"
                    "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂"
                )
                
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=response,
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                
            elif call.data.startswith('quick_run_'):
                km = float(call.data.split('_')[2])
                user_id = str(call.from_user.id)
                chat_id = str(call.message.chat.id) if call.message.chat.type != 'private' else None
                chat_type = call.message.chat.type if call.message.chat else 'private'
                
                self.logger.info(f"Adding quick run: {km} km for user {user_id}")
                self.logger.debug(f"Chat info - id: {chat_id}, type: {chat_type}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–∂–∫—É
                if RunningLog.add_entry(
                    user_id=user_id,
                    km=km,
                    date_added=datetime.now().date(),
                    chat_id=chat_id,
                    chat_type=chat_type
                ):
                    self.logger.info("Run entry added successfully")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    self.logger.debug("Getting user information")
                    user = User.get_by_id(user_id)
                    
                    self.logger.debug("Getting total km")
                    total_km = RunningLog.get_user_total_km(user_id)
                    self.logger.debug(f"Total km: {total_km}")
                    
                    response = f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–æ–±–µ–∂–∫–∞ {km:.2f} –∫–º!\n"
                    if user and user.goal_km > 0:
                        progress = (total_km / user.goal_km * 100)
                        response += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {total_km:.2f} –∏–∑ {user.goal_km:.2f} –∫–º ({progress:.2f}%)"
                    
                    self.logger.debug(f"Generated response: {response}")
                    
                    self.bot.answer_callback_query(
                        call.id,
                        "‚úÖ –ü—Ä–æ–±–µ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞"
                    )
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
                    self.logger.info("Updating profile view")
                    self.handle_profile(call.message)
                else:
                    self.logger.error("Failed to add run entry")
                    self.bot.answer_callback_query(
                        call.id,
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É"
                    )
            
        except Exception as e:
            self.logger.error(f"Error in handle_new_run_callback: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–±–µ–∂–∫–∏"
            )

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    handler = StatsHandler(bot)
    handler.register() 